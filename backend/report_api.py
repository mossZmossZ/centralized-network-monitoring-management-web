from fastapi import APIRouter, HTTPException
from pydantic import BaseModel
import os
from pylatex import Document, Section, Command
from pylatex.utils import NoEscape

router = APIRouter(prefix="/api/report", tags=["report"])

GENERATED_REPORTS_DIR = "generated_reports"
os.makedirs(GENERATED_REPORTS_DIR, exist_ok=True)


# Define a Pydantic model for the request body
class ReportRequest(BaseModel):
    start_date: str
    end_date: str
    report_type: str


@router.post("/generate")
async def generate_report(request: ReportRequest):
    try:
        # Validate report type
        if request.report_type not in ["week", "month"]:
            raise HTTPException(status_code=400, detail="Invalid report type")

        # Generate the PDF filename
        pdf_filename = f"{request.report_type}_report_{request.start_date}_to_{request.end_date}.pdf"
        pdf_filepath = os.path.join(GENERATED_REPORTS_DIR, pdf_filename)

        # Generate the PDF
        create_report_pdf(
            report_type=request.report_type.capitalize(),
            start_date=request.start_date,
            end_date=request.end_date,
            output_path=pdf_filepath,
        )

        return {"message": "Report generated", "filename": pdf_filename}

    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


def create_report_pdf(report_type: str, start_date: str, end_date: str, output_path: str):
    """
    Generate a PDF report using pylatex and save it to the output path.
    """
    # Create a LaTeX document
    doc = Document()

    # Add title and metadata
    doc.preamble.append(Command("title", "System Report"))
    doc.preamble.append(Command("author", "Auto-Generated by FastAPI"))
    doc.preamble.append(Command("date", NoEscape(r"\today")))
    doc.append(NoEscape(r"\maketitle"))

    # Add content sections
    with doc.create(Section("Report Details")):
        doc.append(f"Report Type: {report_type}\n")
        doc.append(f"Start Date: {start_date}\n")
        doc.append(f"End Date: {end_date}\n")

    with doc.create(Section("Summary")):
        doc.append("This is an auto-generated report for the specified date range and type.")

    # Generate the PDF
    doc.generate_pdf(output_path.replace(".pdf", ""), clean_tex=False)